{"version":3,"file":"index.mjs","sources":["../src/config.ts","../src/format.ts","../src/NepaliDate.ts"],"sourcesContent":["export const EPOCH = new Date(1943, 3, 14).getTime()\nexport const START_YEAR = 2000\n// const MAX_DATE = new Date(2032, 4, 14);\n\nexport const NEPALI_DATE_MAP = [\n    [2000, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],\n    [2001, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2002, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n    [2003, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n    [2004, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],\n    [2005, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2006, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n    [2007, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n    [2008, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365],\n    [2009, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2010, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n    [2011, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n    [2012, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],\n    [2013, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2014, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n    [2015, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n    [2016, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],\n    [2017, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2018, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n    [2019, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],\n    [2020, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2021, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2022, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],\n    [2023, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],\n    [2024, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2025, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2026, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n    [2027, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],\n    [2028, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2029, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365],\n    [2030, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n    [2031, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],\n    [2032, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2033, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n    [2034, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n    [2035, 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365],\n    [2036, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2037, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n    [2038, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n    [2039, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],\n    [2040, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2041, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n    [2042, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n    [2043, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],\n    [2044, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2045, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n    [2046, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n    [2047, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2048, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2049, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],\n    [2050, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],\n    [2051, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2052, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2053, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],\n    [2054, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],\n    [2055, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2056, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365],\n    [2057, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n    [2058, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],\n    [2059, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2060, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n    [2061, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n    [2062, 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31, 365],\n    [2063, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2064, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n    [2065, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n    [2066, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365],\n    [2067, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2068, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n    [2069, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n    [2070, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],\n    [2071, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2072, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n    [2073, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n    [2074, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2075, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2076, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],\n    [2077, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],\n    [2078, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2079, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n    [2080, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],\n    [2081, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30, 366],\n    [2082, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365],\n    [2083, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30, 365],\n    [2084, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30, 365],\n    [2085, 31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30, 366],\n    [2086, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365],\n    [2087, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30, 366],\n    [2088, 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30, 365],\n]\n\n// Include the progressive sum at the end of the array\nNEPALI_DATE_MAP.forEach((l, idx, arr) => {\n    l.push(l[13] + (idx === 0 ? 0 : arr[idx - 1][14]))\n})\n","import NepaliDate from \"./NepaliDate\"\n\nconst MONTHS_EN = [\n    \"Baisakh\",\n    \"Jestha\",\n    \"Asar\",\n    \"Shrawan\",\n    \"Bhadra\",\n    \"Aswin\",\n    \"Kartik\",\n    \"Mangsir\",\n    \"Poush\",\n    \"Magh\",\n    \"Falgun\",\n    \"Chaitra\",\n]\nconst MONTHS_SHORT_EN = [\"Bai\", \"Jes\", \"Asa\", \"Shr\", \"Bhd\", \"Asw\", \"Kar\", \"Man\", \"Pou\", \"Mag\", \"Fal\", \"Cha\"]\nconst MONTHS_NP = [\n    \"बैशाख\",\n    \"जेठ\",\n    \"असार\",\n    \"श्रावण\",\n    \"भाद्र\",\n    \"आश्विन\",\n    \"कार्तिक\",\n    \"मंसिर\",\n    \"पौष\",\n    \"माघ\",\n    \"फाल्गुण\",\n    \"चैत्र\",\n]\nconst MONTHS_SHORT_NP = [\"बै\", \"जे\", \"अ\", \"श्रा\", \"भा\", \"आ\", \"का\", \"मं\", \"पौ\", \"मा\", \"फा\", \"चै\"]\nconst NUM_NP = [\"०\", \"१\", \"२\", \"३\", \"४\", \"५\", \"६\", \"७\", \"८\", \"९\"]\nconst WEEKDAYS_SHORT_EN = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\nconst WEEKDAYS_LONG_EN = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\nconst WEEKDAYS_SHORT_NP = [\"आइत\", \"सोम\", \"मंगल\", \"बुध\", \"बिहि\", \"शुक्र\", \"शनि\"]\nconst WEEKDAYS_LONG_NP = [\"आइतबार\", \"सोमबार\", \"मंगलबार\", \"बुधबार\", \"बिहिबार\", \"शुक्रबार\", \"शनिबार\"]\n\nfunction pad(n: number): string {\n    if (n < 10) {\n        return `0${n}`\n    }\n    return `${n}`\n}\n\nfunction npDigit(str: string): string {\n    let res = \"\"\n    for (let i = 0; i < str.length; i += 1) {\n        res += NUM_NP[str.charCodeAt(i) - 48]\n    }\n    return res\n}\n\nfunction yearEn(size: number): (date: NepaliDate) => string | number {\n    return (date) => {\n        if (size <= 2) {\n            return String(date.year).substring(2)\n        }\n        if (size === 3) {\n            return String(date.year).substring(1)\n        }\n        return date.year\n    }\n}\n\nfunction yearNp(size: number): (date: NepaliDate) => string {\n    return (date) => {\n        if (size <= 2) {\n            return npDigit(String(date.year).substring(2))\n        }\n        if (size === 3) {\n            return npDigit(String(date.year).substring(1))\n        }\n        return npDigit(String(date.year))\n    }\n}\n\nfunction monthEn(size: number): (date: NepaliDate) => string {\n    return (date) => {\n        if (size === 1) {\n            return String(date.month + 1)\n        }\n        if (size === 2) {\n            return pad(date.month + 1)\n        }\n        if (size === 3) {\n            return MONTHS_SHORT_EN[date.month]\n        }\n        return MONTHS_EN[date.month]\n    }\n}\n\nfunction monthNp(size: number): (date: NepaliDate) => string {\n    return (date) => {\n        if (size === 1) {\n            return npDigit(String(date.month + 1))\n        }\n        if (size === 2) {\n            return npDigit(pad(date.month + 1))\n        }\n        if (size === 3) {\n            return MONTHS_SHORT_NP[date.month]\n        }\n        return MONTHS_NP[date.month]\n    }\n}\n\nfunction dateEn(size: number): (date: NepaliDate) => string {\n    return (date) => {\n        if (size === 1) {\n            return String(date.day)\n        }\n        if (size === 2) {\n            return pad(date.day)\n        }\n        if (size === 3) {\n            return WEEKDAYS_SHORT_EN[date.getDay()]\n        }\n        return WEEKDAYS_LONG_EN[date.getDay()]\n    }\n}\n\nfunction dateNp(size: number): (date: NepaliDate) => string {\n    return (date) => {\n        if (size === 1) {\n            return npDigit(String(date.day))\n        }\n        if (size === 2) {\n            return npDigit(pad(date.day))\n        }\n        if (size === 3) {\n            return WEEKDAYS_SHORT_NP[date.getDay()]\n        }\n        return WEEKDAYS_LONG_NP[date.getDay()]\n    }\n}\n\nfunction pass(seq: any): any {\n    return () => seq\n}\n\n\nconst fn: { [key: string]: (size: number) => (date: NepaliDate) => string | number } = {\n    Y: yearEn,\n    y: yearNp,\n    M: monthEn,\n    m: monthNp,\n    D: dateEn,\n    d: dateNp,\n}\n\nfunction isSpecial(ch: string) {\n    return ch in fn\n}\n\nfunction tokenize(formatStr: string) {\n    let inQuote = false\n    let seq = \"\"\n    let special = \"\"\n    let specialSize = 0\n\n    const tokens = []\n\n    for (const ch of formatStr) {\n        if (ch === special) {\n            specialSize += 1\n            // eslint-disable-next-line no-continue\n            continue\n        }\n\n        // Time to process special\n        if (special !== \"\") {\n            tokens.push(fn[special](specialSize))\n            special = \"\"\n            specialSize = 0\n        }\n\n        if (ch === '\"') {\n            inQuote = !inQuote\n            // eslint-disable-next-line no-continue\n            continue\n        }\n\n        if (!isSpecial(ch) || inQuote) {\n            seq += ch\n        } else {\n            // got a special character\n            if (seq) {\n                tokens.push(pass(seq))\n                seq = \"\"\n            }\n\n            special = ch\n            specialSize = 1\n        }\n    }\n\n    if (seq) {\n        tokens.push(pass(seq))\n    } else if (special) {\n        tokens.push(fn[special](specialSize))\n    }\n\n    return tokens\n}\n\n// Parse the format string for special characters\n// YY     2 digit year\n// YYY    3 digit year\n// YYYY   4 digit year\n// yy     2 digit year in Nepali\n// yyy    3 digit year in Nepali\n// yyyy   4 digit year in Nepali\n// M      month number\n// MM     0 padded 2 digit month\n// MMM    3 character month name\n// MMMM   Full month name\n// m      digit month in nepali unicode\n// mm     0 padded 2 digit month in nepali unicode\n// mmm    Partial Month name in nepali unicode\n// mmmm   Full month name in nepali unicode\n// D      date number\n// DD     0 padded date number (2 digit)\n// DDD    week day english short form\n// DDDD   week day english full form\n// d      date number in nepali\n// dd     0 padded date number in nepali (2 digit)\n// ddd    week day nepali short form\n// dddd   week day nepali full form\nexport default function format(nepaliDate: NepaliDate, formatStr: string): string {\n    return tokenize(formatStr)\n        .map((f) => f(nepaliDate))\n        .join(\"\")\n}\n","import { START_YEAR, NEPALI_DATE_MAP, EPOCH } from \"./config\"\nimport format from \"./format\"\n\nconst SUM_IDX = 14\n\nfunction parse(dateString: string): number[] {\n    // Expected date formats are yyyy-mm-dd, yyyy.mm.dd yyyy/mm/dd\n    const parts: string[] = dateString.split(/[-./]/, 3)\n    const [year, month = 1, day = 1] = parts.map((d) => {\n        const n = parseInt(d, 10)\n        if (Number.isNaN(n)) {\n            throw new Error(\"Invalid date\")\n        }\n        return n\n    })\n\n    // Make sure we are within range\n    if (year < START_YEAR || year >= START_YEAR + NEPALI_DATE_MAP.length) {\n        throw new Error(\"Nepal year out of range\")\n    }\n\n    if (month < 1 || month > 12) {\n        throw new Error(\"Invalid nepali month must be between 1 - 12\")\n    }\n\n    const daysInMonth = NEPALI_DATE_MAP[year - START_YEAR][month]\n    if (day < 1 || day > daysInMonth) {\n        throw new Error(`Invalid nepali date must be between 1 - ${daysInMonth} in ${year} ${month}`)\n    }\n\n    return [year, month - 1, day]\n}\n\nclass NepaliDate {\n    timestamp: Date\n    year: number\n    month: number\n    day: number\n    static minimum: () => Date\n    static maximum: () => Date\n\n    constructor(...args: any[]) {\n        if (args.length === 0) {\n            this.setEnglishDate(new Date())\n        } else if (args.length === 1) {\n            const e = args[0]\n            if (typeof e === \"object\") {\n                if (e instanceof Date) {\n                    this.setEnglishDate(e)\n                } else if (e instanceof NepaliDate) {\n                    this.timestamp = e.timestamp\n                    this.year = e.year\n                    this.month = e.month\n                    this.day = e.day\n                } else if (typeof e === \"number\") {\n                    this.setEnglishDate(new Date(e))\n                } else {\n                    throw new Error(\"Invalid date argument\")\n                }\n            } else if (typeof e === \"string\") {\n                // Try to parse the date\n                this.set.apply(this, parse(e))\n            } else {\n                throw new Error(\"Invalid date argument\")\n            }\n        } else if (args.length === 3) {\n            this.set(args[0], args[1], args[2])\n        } else {\n            throw new Error(\"Invalid argument syntax\")\n        }\n    }\n\n    setEnglishDate(date: Date) {\n        this.timestamp = date\n        let daysCount = Math.floor((this.timestamp.getTime() - EPOCH) / 86400000)\n        // Look for a index based on number of days since epoch.\n        // it is just to save some iterations searching from idx 0.\n        // So dividing by a number slightly higher than number of days in a year (365.25)\n        let idx = Math.floor(daysCount / 366)\n        while (daysCount >= NEPALI_DATE_MAP[idx][SUM_IDX]) {\n            idx += 1\n        }\n\n        daysCount -= NEPALI_DATE_MAP[idx - 1][SUM_IDX]\n        const tmp = NEPALI_DATE_MAP[idx]\n\n        // eslint-disable-next-line prefer-destructuring\n        this.year = tmp[0]\n\n        // Month starts at 0, check for remaining days left\n        this.month = 0\n        while (daysCount >= tmp[this.month + 1]) {\n            this.month += 1\n            daysCount -= tmp[this.month]\n        }\n\n        // The day of month is the remaining days + 1\n        this.day = daysCount + 1\n    }\n\n    getEnglishDate() {\n        return this.timestamp\n    }\n\n    parse(dateString: string) {\n        this.set.apply(this, parse(dateString))\n    }\n\n    getYear(): number {\n        return this.year\n    }\n\n    getMonth(): number {\n        return this.month\n    }\n\n    getDate(): number {\n        return this.day\n    }\n\n    getDay(): number {\n        return this.timestamp.getDay()\n    }\n\n    getHours(): number {\n        return this.timestamp.getHours()\n    }\n\n    getMinutes(): number {\n        return this.timestamp.getMinutes()\n    }\n\n    getSeconds(): number {\n        return this.timestamp.getSeconds()\n    }\n\n    getMilliseconds(): number {\n        return this.timestamp.getMilliseconds()\n    }\n\n    getTime(): number {\n        return this.timestamp.getTime()\n    }\n\n    setYear(year: number) {\n        this.set(year, this.month, this.day)\n    }\n\n    setMonth(month: number) {\n        this.set(this.year, month, this.day)\n    }\n\n    setDate(day: number) {\n        this.set(this.year, this.month, day)\n    }\n\n    set(year: number, month: number, date: number) {\n        const idx = year + Math.floor(month / 12) - START_YEAR\n        const tmp = NEPALI_DATE_MAP[idx]\n        let d = tmp[SUM_IDX] - tmp[SUM_IDX - 1]\n\n        const m = month % 12\n        const mm = m < 0 ? 12 + m : m\n\n        for (let i = 0; i < mm; i += 1) {\n            d += tmp[i + 1]\n        }\n        d += date - 1\n        this.setEnglishDate(new Date(EPOCH + d * 86400000))\n    }\n\n    format(formatStr: string) {\n        return format(this, formatStr)\n    }\n\n    toString(): string {\n        return `${this.year}/${this.month + 1}/${this.day}`\n    }\n}\n\nNepaliDate.minimum = () => new Date(EPOCH)\nNepaliDate.maximum = () => new Date(EPOCH + NEPALI_DATE_MAP[NEPALI_DATE_MAP.length - 1][SUM_IDX] * 86400000)\n\nexport default NepaliDate\n"],"names":[],"mappings":"AAAO,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,CAAA;AAC7C,MAAM,UAAU,GAAG,IAAI,CAAA;AAC9B;AAEO,MAAM,eAAe,GAAG;IAC3B,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,E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"}